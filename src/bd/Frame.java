/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bd;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableColumnModel;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;


/**
 *
 * @author Al
 */
public class Frame extends javax.swing.JFrame {
    /**
     * Creates new form Frame
     */
    ArrayList<JPanel> panelesNewUser = new ArrayList();
    ArrayList<String> nombresColumnasNewUser = new ArrayList();
    JPanel jPanel4 = new JPanel();
    ArrayList<Integer> idsSelectedInUpdate = new ArrayList();
    ArrayList<PairTypeNumber> tiposNuevoCliente = new ArrayList();
    ArrayList<String> nombresColumnas = new ArrayList();
    ClientLoader loader;
    FiltrosLoader loader2;
    ArrayList<PairTypeField> camposBuscar = new ArrayList();
    ArrayList<String> tablasCamposBuscar = new ArrayList();
    ArrayList<String> nombresTextBoxBusqueda = new ArrayList();
    ArrayList<String> nombresCheckBoxBusqueda = new ArrayList();
    ArrayList<String> columnasAmostrar = new ArrayList();
    HashMap componentesFiltroMap;
    File targetFile;
    BufferedImage targetImg;
    private static final int baseSize = 300;
    private static final String basePath ="Pictures";
    public Frame() {
        try{
            Postgre miPostgre = new Postgre();
        }catch(Exception e){}
        initComponents();
        createFiltros();
        String[] titulos = new String[camposBuscar.size()];
        String [][] contenido = new String[0][camposBuscar.size()];
        for(int i = 0; i<camposBuscar.size();i++){
            titulos[i] = camposBuscar.get(i).namefield;
        }
        iniciarTablaBusquedaHome(titulos, contenido);
        
        jTabbedPane2.addChangeListener(new ChangeListener(){
        
            @Override
            public void stateChanged(ChangeEvent e) {
                System.out.println("Tab: "+jTabbedPane2.getSelectedIndex());
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if(jTabbedPane2.getSelectedIndex() == 2){
                    jComboBox1.setModel(new DefaultComboBoxModel(getNameFromPostgre()));
                    resetAreasForNewUser();
                }
                else if(jTabbedPane2.getSelectedIndex() == 1){
                    createAreasForNewUser();
                    System.out.println("Esta shit");
                    
                }
                else if(jTabbedPane2.getSelectedIndex()==0){
                    createFiltros();
                }
            }  
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panel_filtroHome = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btn_buscarHome = new javax.swing.JButton();
        btn_limpiarHome = new javax.swing.JButton();
        panelNewUser = new javax.swing.JPanel();
        panelFoto = new javax.swing.JPanel();
        labelImage = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        subPanelNewUser_A = new javax.swing.JScrollPane();
        subPanelNewUser = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        scrollPane2 = new java.awt.ScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        scrollPane3 = new java.awt.ScrollPane();
        jPanel7 = new javax.swing.JPanel();
        panelSocial = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fieldTexto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldClientes = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        fieldUsernames = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        fieldHashtags = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        fieldMentions = new javax.swing.JTextField();
        fieldNumHashtags = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        buscar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel_filtroHomeLayout = new javax.swing.GroupLayout(panel_filtroHome);
        panel_filtroHome.setLayout(panel_filtroHomeLayout);
        panel_filtroHomeLayout.setHorizontalGroup(
            panel_filtroHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1050, Short.MAX_VALUE)
        );
        panel_filtroHomeLayout.setVerticalGroup(
            panel_filtroHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(panel_filtroHome);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        btn_buscarHome.setText("Buscar");
        btn_buscarHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarHomeActionPerformed(evt);
            }
        });

        btn_limpiarHome.setText("Limpiar Campos");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jScrollPane3)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(473, Short.MAX_VALUE)
                .addComponent(btn_buscarHome)
                .addGap(384, 384, 384)
                .addComponent(btn_limpiarHome)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_buscarHome)
                    .addComponent(btn_limpiarHome))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Home", jPanel3);

        labelImage.setText("                                                Fotografia del Cliente");

        javax.swing.GroupLayout panelFotoLayout = new javax.swing.GroupLayout(panelFoto);
        panelFoto.setLayout(panelFotoLayout);
        panelFotoLayout.setHorizontalGroup(
            panelFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelFotoLayout.setVerticalGroup(
            panelFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImage, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Buscar Foto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        subPanelNewUser_A.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout subPanelNewUserLayout = new javax.swing.GroupLayout(subPanelNewUser);
        subPanelNewUser.setLayout(subPanelNewUserLayout);
        subPanelNewUserLayout.setHorizontalGroup(
            subPanelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 606, Short.MAX_VALUE)
        );
        subPanelNewUserLayout.setVerticalGroup(
            subPanelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 829, Short.MAX_VALUE)
        );

        subPanelNewUser_A.setViewportView(subPanelNewUser);

        jButton2.setText("Agregar Nuevo Usuario");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Instrucciones:\n\t1. Llenar los campos con la informacion\n\t   que se pide en cada uno de estos.\n\t   Por lo menos deben ser llenados\n\t   aquellos que son obligatorios (*)\n\t2. Agregar una fotografia del cliente\n\t   haciendo uso del boton \"Buscar Foto\".\n\t   Este es un campo obligatorio.\n\t3. Presionar \"Agregar Nuevo Usuario\"\n\nNota:\n\tSi desea agregar un nuevo campo,\n\tpor favor dirijase a la pestaña de\n\t\"Agregar Nuevo Campo\".");
        jTextArea1.setEnabled(false);
        jScrollPane4.setViewportView(jTextArea1);

        javax.swing.GroupLayout panelNewUserLayout = new javax.swing.GroupLayout(panelNewUser);
        panelNewUser.setLayout(panelNewUserLayout);
        panelNewUserLayout.setHorizontalGroup(
            panelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subPanelNewUser_A, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNewUserLayout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelNewUserLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(panelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(panelFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        panelNewUserLayout.setVerticalGroup(
            panelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subPanelNewUser_A)
                    .addGroup(panelNewUserLayout.createSequentialGroup()
                        .addComponent(panelFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane4)
                        .addGap(41, 41, 41)))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Agregar Cliente", panelNewUser);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Elegir el cliente a actualizar:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(752, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Actualizar Cliente", jPanel5);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Elegir el cliente a eliminar:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(752, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Eliminar Cliente", jPanel6);

        jLabel3.setText("Tweets Conteniendo:");

        jLabel4.setText("De Los Clientes: ");

        fieldClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldClientesActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("Separar por comas para varios clientes");

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Tweet", "Cliente", "ID del Cliente", "User Name", "Fecha", "Hashtags", "Mentions"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setRowHeight(100);
        jScrollPane1.setViewportView(resultsTable);

        jLabel6.setText("Con Usernames:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setText("Separar por comas para varios usernames");

        fieldUsernames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldUsernamesActionPerformed(evt);
            }
        });

        jLabel8.setText("Con Hashtags:");

        fieldHashtags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldHashtagsActionPerformed(evt);
            }
        });

        jLabel9.setText("Con Mentions:");

        fieldMentions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldMentionsActionPerformed(evt);
            }
        });

        fieldNumHashtags.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNumHashtagsActionPerformed(evt);
            }
        });

        jLabel10.setText("# de Hastags por Tweet:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel11.setText("Separar por comas para varios hashtags");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel12.setText("Separar por comas para varios mentions");

        buscar.setText("Buscar!");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bd/tittle.png"))); // NOI18N

        javax.swing.GroupLayout panelSocialLayout = new javax.swing.GroupLayout(panelSocial);
        panelSocial.setLayout(panelSocialLayout);
        panelSocialLayout.setHorizontalGroup(
            panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(panelSocialLayout.createSequentialGroup()
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSocialLayout.createSequentialGroup()
                        .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelSocialLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(fieldHashtags))
                            .addComponent(fieldTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSocialLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSocialLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panelSocialLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSocialLayout.createSequentialGroup()
                        .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelSocialLayout.createSequentialGroup()
                                .addComponent(fieldClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))
                            .addComponent(jLabel5)
                            .addGroup(panelSocialLayout.createSequentialGroup()
                                .addComponent(fieldMentions, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSocialLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSocialLayout.createSequentialGroup()
                                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fieldNumHashtags, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldUsernames))
                                .addGap(13, 13, 13))))
                    .addGroup(panelSocialLayout.createSequentialGroup()
                        .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(panelSocialLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(panelSocialLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelSocialLayout.setVerticalGroup(
            panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSocialLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldUsernames, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(fieldTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(fieldClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSocialLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSocialLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(fieldHashtags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(fieldMentions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldNumHashtags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSocialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSocial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSocial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Social", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnEliminarClienteActionPerformed
    
    //recargar elementos al 
    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        //el codigo va aqui
    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void fieldClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldClientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldClientesActionPerformed

    private void fieldUsernamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldUsernamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldUsernamesActionPerformed

    private void fieldHashtagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldHashtagsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldHashtagsActionPerformed

    private void fieldMentionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldMentionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldMentionsActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        String texto = this.fieldTexto.getText();
        List<String> clientes = Arrays.asList( this.fieldClientes.getText().split("\\s*,\\s*")); 
        ArrayList<String> clientes2 = new ArrayList<String>();
        if(!this.fieldClientes.getText().equals("")){
            clientes2.addAll(clientes);
        }
        
        
        List<String> users = Arrays.asList( this.fieldUsernames.getText().split("\\s*,\\s*")); 
        ArrayList<String> users2 = new ArrayList<String>();
        if(!this.fieldUsernames.getText().equals("")){
            users2.addAll(users); 
        }
           
        
        List<String> hashtags = Arrays.asList( this.fieldHashtags.getText().split("\\s*,\\s*")); 
        ArrayList<String> hashtags2 = new ArrayList<String>();
        if(!this.fieldHashtags.getText().equals("")){
            hashtags2.addAll(hashtags); 
        }        
         
        
        List<String> mentions = Arrays.asList( this.fieldMentions.getText().split("\\s*,\\s*")); 
        ArrayList<String> mentions2 = new ArrayList<String>();
        if(!this.fieldMentions.getText().equals("")){
            mentions2.addAll(mentions); 
        }            
        int numHashtags = -1;
        if(this.fieldNumHashtags.getText().equals("")){
            numHashtags = -1;
        }
        else{
            try{
                numHashtags = Integer.parseInt(this.fieldNumHashtags.getText());
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "El campo # de hastags solo acepta numeros enteros");
                return;
            }
            
        }
        
        MongoDB mongo = new MongoDB();
        ArrayList<Tweet> tweets = mongo.buscarTweets(texto, clientes2, users2, hashtags2, mentions2, numHashtags);
        String[] cols =     new String [] {
                "Tweet", "ID del Cliente","Cliente" , "Username","Fecha", "Hashtags","Numero Hashtags", "Mentions"
                
            };          
        
        String[][] filasT = new String[tweets.size()][cols.length];
        for(int i =0 ;i< tweets.size(); i++){
            String[] filaI = new String[tweets.get(i).toStringArrayList().size()];
            filaI = tweets.get(i).toStringArrayList().toArray(filaI);
            filasT[i] = filaI;        
        }
        this.resultsTable.setModel(new javax.swing.table.DefaultTableModel(filasT,cols));
        TableColumnModel cm = this.resultsTable.getColumnModel();
        TextAreaRenderer textAreaRenderer = new TextAreaRenderer(); 
        cm.getColumn(0).setCellRenderer(textAreaRenderer);
        cm.getColumn(5).setCellRenderer(textAreaRenderer);
        cm.getColumn(7).setCellRenderer(textAreaRenderer);

      
    }//GEN-LAST:event_buscarActionPerformed

    private void fieldNumHashtagsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNumHashtagsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNumHashtagsActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Funcion
        browseButtonActionPerformed(evt);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Se arma la query
        String valuesCliente = "";
        String valuesContacto = "";
        String valuesEmpresa = "";
        String valuesIndustria = "";
        String valuesSocialData = "";
        // Primero se comeienza a tomar cada uno de los valores
        ArrayList<ArrayList<String>> nuevosValores = getValueForNewUser();
        System.out.println("El size del coso es "+nuevosValores.size());
        //una vez recolectado los valores se procede a realizar una verificacion de los mismo
        ArrayList<String> dataProbar = new ArrayList();
        int indiceDeArrayFila = 0;
        int indiceInterno = 0;
        String mensajeNoNull = "";
        for(ArrayList<String> fila: nuevosValores){ //llenamos la data
            indiceInterno = 0;
            for(String dato: fila){
                if(indiceDeArrayFila == 0 && dato.equals("NULL")){
                    //se va a lanzar error porque este campo es obligatorio
                    mensajeNoNull += "El campo de "+nombresColumnas.get(indiceInterno)+" es obligatorio.\n";
                    indiceInterno++;
                    continue;
                }
                dataProbar.add(dato);
                indiceInterno++;
            }
            if(indiceDeArrayFila == 0 && !mensajeNoNull.isEmpty()){
                JOptionPane.showMessageDialog(null,
                        mensajeNoNull, "Error en Campos Obligatorios",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            indiceDeArrayFila++;
        }
        
        ArrayList<PairTypeNumber> arreglar = loader.checkCamposNuevo(tiposNuevoCliente, dataProbar);
        if(!arreglar.isEmpty()){
            //Si no esta vacio entonces hay cosas que arreglar entonces TODO!!!!!!!!!
            String mensajeDeErrorCompleto ="";
            ArrayList<Integer> numberComponer = new ArrayList();
            for(PairTypeNumber deber: arreglar){
                mensajeDeErrorCompleto+=deber.nameType+"\n";
                numberComponer.add(deber.numberType);
                
            }
            //ahora se deben borrar los textfield con ese indice
            //hmmmm para esto tengo que recorrer otra vez los paneles y aha D:
            int indiceJPanel = 0;
            for(int k = 1; k < panelesNewUser.size(); k++){
                JPanel panel = panelesNewUser.get(k);
                for(int i = 0; i < panel.getComponentCount(); i++) {
                    if(panel.getComponent(i) instanceof JTextField) {
                       JTextField campo = (JTextField)panel.getComponent(i);
                       if(numberComponer.contains(indiceJPanel)){
                            campo.setText("");
                       }
                       indiceJPanel++;
                    }
                 }  
            }
            //Por ultimo solo tengo que lanzar el mensaje de error x)
            JOptionPane.showMessageDialog(null,
                        mensajeDeErrorCompleto, "Error en Campos",
                        JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            int indexIntoArrayOfArray = 0;
            int numeroTipo = 0;
            boolean necesitaComillas = false;
            for(ArrayList<String> i : nuevosValores){

                for(int k = 0; k<i.size(); k++){
                    String tipo = tiposNuevoCliente.get(numeroTipo).nameType;
                    if(tipo.contains("VARCHAR") || tipo.contains("TEXT") || tipo.contains("DATE")){
                        necesitaComillas = true;
                    }
                    String j = i.get(k);
                    System.out.println(j);
                    if(j.equals("NULL")){
                        valuesCliente+=j+", ";
                        numeroTipo++;
                        necesitaComillas = false;
                        continue;
                        
                    }
                    if(indexIntoArrayOfArray == 0){
                        if(necesitaComillas){
                            valuesCliente+="\'"+j+"\', ";
                            numeroTipo++;
                            necesitaComillas = false;
                        }
                        else{
                            valuesCliente+=j+", ";
                            numeroTipo++;
                        }

                    }
                    else if(indexIntoArrayOfArray == 1){
                        if(necesitaComillas){
                            if(k == i.size()-1){
                                valuesContacto += "\'"+j+"\'";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                            else{
                                valuesContacto+="\'"+j+"\', ";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                        }
                        else{
                            if(k == i.size()-1){
                                valuesContacto += j;
                                numeroTipo++;
                            }
                            else{
                                valuesContacto+=j+", ";
                                numeroTipo++;
                            }
                        }
                    }
                    else if(indexIntoArrayOfArray == 2){
                        if(necesitaComillas){
                            if(k == i.size()-1){
                                valuesEmpresa+="\'"+j+"\'";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                            else{
                                valuesEmpresa+="\'"+j+"\', ";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                        }
                        else{
                            if(k == i.size()-1){
                                valuesEmpresa+=j;
                                numeroTipo++;
                            }
                            else{
                                valuesEmpresa+=j+", ";
                                numeroTipo++;
                            }
                        }

                    }
                    else if(indexIntoArrayOfArray == 3){
                        if(necesitaComillas){
                            if(k == i.size()-1){
                                valuesIndustria+="\'"+j+"\'";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                            else{
                                valuesIndustria+="\'"+j+"\', ";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                        }
                        else{
                            if(k == i.size()-1){
                                valuesIndustria+=j;
                                numeroTipo++;
                            }
                            else{
                                valuesIndustria+=j+", ";
                                numeroTipo++;
                            }
                        }

                    }
                    else if(indexIntoArrayOfArray == 4){
                        if(necesitaComillas){
                            if(k == i.size()-1){
                                valuesSocialData+="\'"+j+"\'";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                            else{
                                valuesSocialData+="\'"+j+"\', ";
                                numeroTipo++;
                                necesitaComillas = false;
                            }
                        }
                        else{
                            if(k == i.size()-1){
                                valuesSocialData+=j;
                                numeroTipo++;
                            }
                            else{
                                valuesSocialData+=j+", ";
                                numeroTipo++;
                            }
                        }

                    }
                }
                if(indexIntoArrayOfArray == 0){
                    try{
                        System.out.println(targetFile.getAbsolutePath());
                        valuesCliente+="\'"+targetFile.getAbsolutePath()+"\'"; 
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null,
                            "Se debe elegir una fotografia. \nEste es un campo obligatorio", "Error en Campo de Fotografia",
                            JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
                else{

                }
                indexIntoArrayOfArray++;
                System.out.println("----------------------");
            }

            String queryInstert = "INSERT INTO cliente "+"ALGO QUE DARA QUE HACER D;"+ "VALUES ("+valuesCliente+", ";
            String queryInsertContacto="INSERT INTO contacto "+"(telefono_cliente,direccion_cliente, correo, celular, departamento)"+ " VALUES ("+valuesContacto+") RETURNING id;";
            String queryInsertEmpresa="INSERT INTO empresa "+"(nombre_empresa, cargo, direccion_empresa, telefono_empresa)"+" VALUES ("+valuesEmpresa+"); RETURNING id";
            String queryInsertIndustria="INSERT INTO industria "+"(nombre_industria, descripcion)"+" VALUES ("+valuesIndustria+"); RETURNING id";
            String queryInsertSocialData="INSERT INTO socialData "+"(facebook, twitter, \"google+\",youtube, tumblr)"+" VALUES ("+valuesSocialData+"); RETURNING id";

            //executing the queries
            Statement st;
            Statement st2;
            Statement st3;
            Statement st4;
            Statement stFinal;

            String idContacto;
            String idEmpresa;
            String idIndustria;
            String idSocialData;
            try {
                //contacto
                st = Postgre.bdConnection.createStatement();
                ResultSet rs = st.executeQuery(queryInsertContacto);
                ResultSetMetaData m = rs.getMetaData();
                idContacto = rs.getString(1);
                //empresa
                st2 = Postgre.bdConnection.createStatement();
                ResultSet rs2 = st2.executeQuery(queryInsertEmpresa);
                ResultSetMetaData m2 = rs2.getMetaData();
                idEmpresa = rs2.getString(1);
                //industria
                st3 = Postgre.bdConnection.createStatement();
                ResultSet rs3 = st3.executeQuery(queryInsertIndustria);
                ResultSetMetaData m3 = rs3.getMetaData();
                idIndustria = rs3.getString(1);
                //socialData
                st4 = Postgre.bdConnection.createStatement();
                ResultSet rs4 = st4.executeQuery(queryInsertSocialData);
                ResultSetMetaData m4 = rs4.getMetaData();
                idSocialData = rs4.getString(1);
                queryInstert+=idContacto+", "+idEmpresa+", "+idIndustria+", "+idSocialData+");";

                //Ahora si se ejecuta la del inser final
               stFinal = Postgre.bdConnection.createStatement();
               ResultSet rsF = stFinal.executeQuery(queryInstert);
               ResultSetMetaData mF = rsF.getMetaData();

            } catch (SQLException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }


            System.out.println(queryInstert);
            System.out.println(queryInsertContacto);
            System.out.println(queryInsertEmpresa);
            System.out.println(queryInsertIndustria);
            System.out.println(queryInsertSocialData);

            
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void createComponentesFiltroMap() {
        componentesFiltroMap = new HashMap<String,Component>();
        
        Component[] components = panel_filtroHome.getComponents();
        for (int i=0; i < components.length; i++) {
            if(!(components[i].getName()==null)){
                Component[] components2 = ((Container)components[i]).getComponents();
                for(int j = 0; j<components2.length;j++){
                    if(!(components2[j].getName()==null)){
                        componentesFiltroMap.put(components2[j].getName(), components2[j]);
                    }
                }
            }
        }
        
    }
    
    public Component getFiltroComponentByName(String name) {
        if (componentesFiltroMap.containsKey(name)) {
                return (Component) componentesFiltroMap.get(name);
        }
        else return null;
    }
    
    private void btn_buscarHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarHomeActionPerformed
        Boolean huboerror = false;
        Boolean primero = true;
        Boolean primeroSelect = true;
        String query3 = "";
        String query2 = "FROM (((cliente JOIN contacto ON (cliente.contacto_idcontacto = contacto.id))\n" +
                        "JOIN empresa ON (cliente.empresa_idempresa = empresa.id))\n" +
                        "JOIN industria ON (cliente.industria_idindustria = industria.id)\n" +
                        "JOIN socialdata ON (cliente.socialdata_idsocialdata = socialdata.id))";
        String query1 = "";
                        
        createComponentesFiltroMap() ;
//        for(int i = 0; i<camposBuscar.size();i++){
//            System.out.println(camposBuscar.get(i).typeField);
//        }
        for(int i = 0; i<nombresTextBoxBusqueda.size();i++){
            if(!(((JTextField)getFiltroComponentByName(nombresTextBoxBusqueda.get(i))).getText().equals(""))){
                if(primero){
                    query3 += "WHERE (";
                    primero = false;
                }
                else{
                    query3 += " AND (";
                }
                List<String> ingresos = Arrays.asList( ((JTextField)getFiltroComponentByName(nombresTextBoxBusqueda.get(i))).getText().split("\\s*,\\s*")); 
                for(int j = 0;j<ingresos.size();j++){
                    
                    String type_campo = camposBuscar.get(i).typeField;
                    String nombre_campo = camposBuscar.get(i).namefield;
                    String tabla_campo = tablasCamposBuscar.get(i);
                    if(type_campo.equals("text")){
                        boolean correcto = loader2.validateField(ingresos.get(j), 1);
                        if(correcto){
                            if(j==ingresos.size()-1){
                                query3 += tabla_campo+"."+nombre_campo+" LIKE \'"+ingresos.get(j)+"\' )";
                            }
                            else{
                                query3 += tabla_campo+"."+nombre_campo+" LIKE \'"+ingresos.get(j)+"\' OR ";
                            }
                            
                        }
                        else{
                            huboerror = true;
                            ((JTextField)getFiltroComponentByName(nombresTextBoxBusqueda.get(i))).setText("");
                            JOptionPane.showMessageDialog(this, "El campo "+nombre_campo+" no se especifico un string valido.");
                            j = ingresos.size();
                            i = nombresTextBoxBusqueda.size();
                        }
                    }
                    else if(type_campo.contains("int")){
                        boolean correcto = loader2.validateField(ingresos.get(j), 2);
                        if(correcto){
                            if(j==ingresos.size()-1){
                                query3 += tabla_campo+"."+nombre_campo+" = "+ingresos.get(j)+" )";
                            }
                            else{
                                query3 += tabla_campo+"."+nombre_campo+" = "+ingresos.get(j)+" OR ";
                            }
                            
                        }
                        else{
                            huboerror = true;
                            ((JTextField)getFiltroComponentByName(nombresTextBoxBusqueda.get(i))).setText("");
                            JOptionPane.showMessageDialog(this, "El campo "+nombre_campo+" no se especifico un entero valido.");
                            j = ingresos.size();
                            i = nombresTextBoxBusqueda.size();
                        }
                    }
                    else if(type_campo.contains("float")){
                        boolean correcto = loader2.validateField(ingresos.get(j), 3);
                        if(correcto){
                            if(j==ingresos.size()-1){
                                query3 += tabla_campo+"."+nombre_campo+" = "+ingresos.get(j)+" )";
                            }
                            else{
                                query3 += tabla_campo+"."+nombre_campo+" = "+ingresos.get(j)+" OR ";
                            }
                            
                        }
                        else{
                            huboerror = true;
                            ((JTextField)getFiltroComponentByName(nombresTextBoxBusqueda.get(i))).setText("");
                            JOptionPane.showMessageDialog(this, "El campo "+nombre_campo+" no se especifico un decimal valido.");
                            j = ingresos.size();
                            i = nombresTextBoxBusqueda.size();
                        }
                    }
                    else if(type_campo.equals("date")){
                        boolean correcto = loader2.validateField(ingresos.get(j), 4);
                        if(correcto){
                            if(j==ingresos.size()-1){
                                query3 += tabla_campo+"."+nombre_campo+" = \'"+ingresos.get(j)+"\' )";
                            }
                            else{
                                query3 += tabla_campo+"."+nombre_campo+" = \'"+ingresos.get(j)+"\' OR ";
                            }
                            
                        }
                        else{
                            huboerror = true;
                            ((JTextField)getFiltroComponentByName(nombresTextBoxBusqueda.get(i))).setText("");
                            JOptionPane.showMessageDialog(this, "El campo "+nombre_campo+" no se especifico una fecha valida.");
                            j = ingresos.size();
                            i = nombresTextBoxBusqueda.size();
                        }
                    }
                }
                
            }
        }
        if(!huboerror){
            for(int i = 0; i<nombresCheckBoxBusqueda.size();i++){
                if(((JCheckBox)getFiltroComponentByName(nombresCheckBoxBusqueda.get(i))).isSelected()){
                    String nombre_campo = camposBuscar.get(i).namefield;
                    String tabla_campo = tablasCamposBuscar.get(i);
                    if(primeroSelect){
                        query1 += "SELECT "+tabla_campo+"."+nombre_campo;
                        primeroSelect = false;
                        columnasAmostrar.add(nombre_campo);
                    }
                    else{
                        query1 += ", "+tabla_campo+"."+nombre_campo;
                        columnasAmostrar.add(nombre_campo);
                    }
                }
            }
            if(primeroSelect){
                query1 = "SELECT *";
            }
            String query = query1+"\n"+query2+"\n"+query3;
            System.out.println(query);
            metaDataBusqueda(query);
            
        }
        
    }//GEN-LAST:event_btn_buscarHomeActionPerformed
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser(basePath);
        fc.setFileFilter(new JPEGImageFileFilter());
        int res = fc.showOpenDialog(null);
        try {
            if (res == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                //System.out.println(file.getAbsolutePath());
                setTarget(file);
            } 
            else {
                JOptionPane.showMessageDialog(null,
                        "Debe elegir una imagen para un cliente nuevo.", "Cancelando...",
                        JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception iOException) {
        }

    }
    
    public void setTarget(File reference)
    {
        try {
            targetFile = reference;
            targetImg = rescale(ImageIO.read(reference));
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //panelFoto.setLayout(new BorderLayout(0, 0));
        labelImage.setText("");
        labelImage.setIcon(new ImageIcon(targetImg));
        labelImage.setHorizontalAlignment(SwingConstants.CENTER);
        setVisible(true);
    }
    
    public BufferedImage rescale(BufferedImage originalImage)
    {
        BufferedImage resizedImage = new BufferedImage(baseSize, baseSize, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(originalImage, 0, 0, baseSize, baseSize, null);
        g.dispose();
        return resizedImage;
    }
    
    private ArrayList<ArrayList<String>> getValueForNewUser(){
        ArrayList<ArrayList<String>> valores = new ArrayList();
        ArrayList<String> valTemp = new ArrayList();
        for(int k = 1; k < panelesNewUser.size(); k++){
            JPanel panel = panelesNewUser.get(k);
            for(int i = 0; i < panel.getComponentCount(); i++) {
                if(panel.getComponent(i) instanceof JTextField) {
                   JTextField campo = (JTextField)panel.getComponent(i);
                   String valoresT = campo.getText();
                   if(valoresT.isEmpty()){
                       valoresT = "NULL";
                   }
                   valTemp.add(valoresT);
                }
                if(panel.getComponentCount() == 1){
                    valores.add(valTemp);
                    valTemp = new ArrayList();
                }
             }  
        }
        //se agrega el ultimo
        valores.add(valTemp);
        return valores;
    }
    private void resetAreasForNewUser(){
        for(int k = 1; k < panelesNewUser.size(); k++){
            JPanel panel = panelesNewUser.get(k);
            for(int i = 0; i < panel.getComponentCount(); i++) {
                if(panel.getComponent(i) instanceof JTextField) {
                   JTextField campo = (JTextField)panel.getComponent(i);
                   campo.setText("");
                }
             }  
        }
    }
    private String[] getNameFromPostgre(){
        ArrayList<String> namePersona = new ArrayList();
        String query = "SELECT id, nombre FROM cliente";
        Statement st;
        try {
            st = Postgre.bdConnection.createStatement();
            ResultSet rs = st.executeQuery(query);
            ResultSetMetaData m = rs.getMetaData();
            
            while(rs.next()){
                String nombreAdd = rs.getString(2);
                namePersona.add(nombreAdd);
                int numeroId = Integer.parseInt(rs.getString(1));
                idsSelectedInUpdate.add(numeroId);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] nombresToReturn = new String[namePersona.size()];
        namePersona.toArray(nombresToReturn);
        return nombresToReturn;
    }
    //metodo para llenar el elementos al add user
    private void createAreasForNewUser(){
        ArrayList<PairTypeField> nombresLabels = new ArrayList();
        String query = "SELECT \n" +
                    "	* " +
                    "		\n" +
                        "FROM (((cliente JOIN contacto ON (cliente.contacto_idcontacto = contacto.id))\n" +
                        "JOIN empresa ON (cliente.empresa_idempresa = empresa.id))\n" +
                        "JOIN industria ON (cliente.industria_idindustria = industria.id)\n" +
                        "JOIN socialdata ON (cliente.socialdata_idsocialdata = socialdata.id)) WHERE cliente.id = -1";
       String countClient = "SELECT * FROM cliente WHERE id = -1";
        Statement st;
        Statement st2;
        nombresColumnasNewUser = new ArrayList();
        int numeroFinalCliente = 0;
        try {
            st = Postgre.bdConnection.createStatement();
            st2 = Postgre.bdConnection.createStatement();
            ResultSet rs = st.executeQuery(query);
            ResultSet rs2 = st2.executeQuery(countClient);
            ResultSetMetaData m = rs.getMetaData();
            ResultSetMetaData m2 = rs2.getMetaData();
            numeroFinalCliente = m2.getColumnCount()-6;
            for(int i = 1; i< m.getColumnCount()+1;i++){
                String tipoColumna = m.getColumnTypeName(i);
                String nombreColumna = m.getColumnName(i);
                nombresColumnasNewUser.add(nombreColumna);
                PairTypeField par = new PairTypeField(tipoColumna,nombreColumna);
                nombresLabels.add(par);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        loader  = new ClientLoader(numeroFinalCliente);
        ArrayList<JPanel> previo= loader.componentesNuevoCliente(nombresLabels);
        tiposNuevoCliente = loader.tiposNuevoCliente;
        nombresColumnas = loader.nombresColumnas;
        if(panelesNewUser.size() != previo.size()){
            panelesNewUser = new ArrayList(); //se resetea
            panelesNewUser.addAll(previo); //se carga la nueva data
            //subPanelNewUser_A.remove(subPanelNewUser);
            subPanelNewUser.setLayout(new GridLayout(0, 1));
            for(JPanel pa : panelesNewUser){
                subPanelNewUser.add(pa);
                subPanelNewUser.revalidate();
                subPanelNewUser.repaint();
            }
            System.out.println(panelesNewUser.size());
            //subPanelNewUser_A.add(subPanelNewUser);
            //subPanelNewUser_A.revalidate();
            //subPanelNewUser_A.repaint();
            setVisible(true);
        }
        
    }
    
    private void createFiltros(){
        //ArrayList<PairTypeField> nombresColumna = new ArrayList();
        String query = "SELECT *" +
                        "FROM (((cliente JOIN contacto ON (cliente.contacto_idcontacto = contacto.id))\n" +
                        "JOIN empresa ON (cliente.empresa_idempresa = empresa.id))\n" +
                        "JOIN industria ON (cliente.industria_idindustria = industria.id)\n" +
                        "JOIN socialdata ON (cliente.socialdata_idsocialdata = socialdata.id)) WHERE cliente.id = -1";
        String countClient = "SELECT * FROM cliente WHERE id = -1";
        Statement st;
        Statement st2;
        int numeroFinalFiltro = 0;
        try{
            st = Postgre.bdConnection.createStatement();
            st2 = Postgre.bdConnection.createStatement();
            ResultSet rs = st.executeQuery(query);
            ResultSet rs2 = st2.executeQuery(countClient);
            ResultSetMetaData m = rs.getMetaData();
            ResultSetMetaData m2 = rs2.getMetaData();
            numeroFinalFiltro = m2.getColumnCount()-6;
            camposBuscar = new ArrayList();
            for(int i = 1; i<m.getColumnCount()+1;i++){
                if(m.getColumnName(i).contains("id") && !m.getColumnName(i).equals("apellido")){
                    continue;
                }
                else if(m.getColumnName(i).contains("foto")){
                    continue;
                }
                PairTypeField tempPair = new PairTypeField(m.getColumnTypeName(i),m.getColumnName(i));
                camposBuscar.add(tempPair);
            }
            
            
        }catch (SQLException ex){
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        loader2 = new FiltrosLoader(numeroFinalFiltro);
        ArrayList<JPanel> paneles = loader2.componentesFiltro(camposBuscar);
        nombresTextBoxBusqueda = new ArrayList();
        nombresTextBoxBusqueda.addAll(loader2.nombreTextBox);
        tablasCamposBuscar = new ArrayList();
        tablasCamposBuscar.addAll(loader2.tablasRetorno);
        nombresCheckBoxBusqueda = new ArrayList();
        nombresCheckBoxBusqueda.addAll(loader2.nombreCheckBox);
        panel_filtroHome.setLayout(new GridLayout(0, 1));
        for(JPanel pa : paneles){
            panel_filtroHome.add(pa);
            panel_filtroHome.revalidate();
            panel_filtroHome.repaint();
        }
        
        setVisible(true);
    }
    
    private void metaDataBusqueda(String query){
        Statement st, st2;
        ResultSet rs, rs2;
        ResultSetMetaData m , m2;
        int numFilas = 0;
        try{
            st = Postgre.bdConnection.createStatement();
            st2 = Postgre.bdConnection.createStatement();
            rs = st.executeQuery(query);
            rs2 = st2.executeQuery(query);
            m = rs.getMetaData();
            m2 = rs.getMetaData();
            
            while(rs.next()){
                
                numFilas+=1;       
            }
            int contadorColumnas = 0;
            for(int i = 0; i < m.getColumnCount();i++){
                if(m.getColumnName(i+1).contains("id") && !m.getColumnName(i+1).equals("apellido")){
                    continue;
                }
                else if(m.getColumnName(i+1).contains("foto")){
                    continue;
                }
                contadorColumnas+=1;
            }
            String[] titulos = new String[contadorColumnas];
            int count = 0;
            for(int i = 0; i < m.getColumnCount();i++){
                if(m.getColumnName(i+1).contains("id") && !m.getColumnName(i+1).equals("apellido")){
                    continue;
                }
                else if(m.getColumnName(i+1).contains("foto")){
                    continue;
                }
                titulos[count] =m.getColumnName(i+1);
                count++;
            }
            String[][] contenido = new String[numFilas][contadorColumnas];
            while(rs2.next()){
                count = 0;
                for(int i = 0; i < m.getColumnCount();i++){
                    if(m2.getColumnName(i).contains("id") && !m2.getColumnName(i).equals("apellido")){
                    continue;
                    }
                    else if(m2.getColumnName(i).contains("foto")){
                        continue;
                    }
                    contenido[rs2.getRow()-1][count] = rs.getString(i+1);
                    count++;
                }
            }
            iniciarTablaBusquedaHome(titulos, contenido);
        }catch(SQLException ex){
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void iniciarTablaBusquedaHome(String[] titulos, String[][] contenido){
        
        jTable1.removeColumnSelectionInterval(0, jTable1.getColumnCount()-1);
        this.jTable1.setModel(new javax.swing.table.DefaultTableModel(contenido,titulos));
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //recorrer columnas y ponerles un tamaño estandarizado
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_buscarHome;
    private javax.swing.JButton btn_limpiarHome;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField fieldClientes;
    private javax.swing.JTextField fieldHashtags;
    private javax.swing.JTextField fieldMentions;
    private javax.swing.JTextField fieldNumHashtags;
    private javax.swing.JTextField fieldTexto;
    private javax.swing.JTextField fieldUsernames;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelImage;
    private javax.swing.JPanel panelFoto;
    private javax.swing.JPanel panelNewUser;
    private javax.swing.JPanel panelSocial;
    private javax.swing.JPanel panel_filtroHome;
    private javax.swing.JTable resultsTable;
    private java.awt.ScrollPane scrollPane2;
    private java.awt.ScrollPane scrollPane3;
    private javax.swing.JPanel subPanelNewUser;
    private javax.swing.JScrollPane subPanelNewUser_A;
    // End of variables declaration//GEN-END:variables
}
